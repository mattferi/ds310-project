{
	"name": "CountriesFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VM_Countries",
						"type": "DatasetReference"
					},
					"name": "VM"
				},
				{
					"dataset": {
						"referenceName": "UNParquet",
						"type": "DatasetReference"
					},
					"name": "UN"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "cast1"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> VM",
				"source(output(",
				"          Prop_0 as string,",
				"          Prop_1 as string,",
				"          Prop_2 as string,",
				"          Prop_3 as string,",
				"          Prop_4 as string,",
				"          Prop_5 as string,",
				"          Prop_6 as string,",
				"          Prop_7 as string,",
				"          Prop_8 as string,",
				"          Prop_9 as string,",
				"          Prop_10 as string,",
				"          Prop_11 as string,",
				"          Prop_12 as string,",
				"          Prop_13 as string,",
				"          Prop_14 as string,",
				"          Prop_15 as string,",
				"          Prop_16 as string,",
				"          Prop_17 as string,",
				"          Prop_18 as string,",
				"          Prop_19 as string,",
				"          Prop_20 as string,",
				"          Prop_21 as string,",
				"          Prop_22 as string,",
				"          Prop_23 as string,",
				"          Prop_24 as string,",
				"          Prop_25 as string,",
				"          Prop_26 as string,",
				"          Prop_27 as string,",
				"          Prop_28 as string,",
				"          Prop_29 as string,",
				"          Prop_30 as string,",
				"          Prop_31 as string,",
				"          Prop_32 as string,",
				"          Prop_33 as string,",
				"          Prop_34 as string,",
				"          Prop_35 as string,",
				"          Prop_36 as string,",
				"          Prop_37 as string,",
				"          Prop_38 as string,",
				"          Prop_39 as string,",
				"          Prop_40 as string,",
				"          Prop_41 as string,",
				"          Prop_42 as string,",
				"          Prop_43 as string,",
				"          Prop_44 as string,",
				"          Prop_45 as string,",
				"          Prop_46 as string,",
				"          Prop_47 as string,",
				"          Prop_48 as string,",
				"          Prop_49 as string,",
				"          Prop_50 as string,",
				"          Prop_51 as string,",
				"          Prop_52 as string,",
				"          Prop_53 as string,",
				"          Prop_54 as string,",
				"          Prop_55 as string,",
				"          Prop_56 as string,",
				"          Prop_57 as string,",
				"          Prop_58 as string,",
				"          Prop_59 as string,",
				"          Prop_60 as string,",
				"          Prop_61 as string,",
				"          Prop_62 as string,",
				"          Prop_63 as string,",
				"          Prop_64 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> UN",
				"VM select(mapColumn(",
				"          Country,",
				"          Country_Code = CountryCode,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"UN filter(Prop_5 != '') ~> filter1",
				"filter1 select(mapColumn(",
				"          Country = Prop_2,",
				"          Country_Code = Prop_5,",
				"          Year = Prop_10,",
				"          Population = Prop_11,",
				"          Pop_Density = Prop_15,",
				"          Median_Age = Prop_17,",
				"          Life_Expectancy = Prop_34",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 cast(output(",
				"          Year as integer,",
				"          Population as integer,",
				"          Pop_Density as float,",
				"          Median_Age as float,",
				"          Life_Expectancy as float",
				"     ),",
				"     errors: true) ~> cast1",
				"select1, filter2 join(select1@Country_Code == select2@Country_Code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"cast1 filter(Year == 2020) ~> filter2",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['Countries.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}