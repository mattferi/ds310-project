{
	"name": "PoliciesFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDbNoSqlContainer1",
						"type": "DatasetReference"
					},
					"name": "cosmoPolicies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PoliciesParquet",
						"type": "DatasetReference"
					},
					"name": "PoliciesSink"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "Policies"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as string,",
				"          {C1_School closing} as integer,",
				"          C1_Flag as integer,",
				"          {C2_Workplace closing} as integer,",
				"          C2_Flag as integer,",
				"          {C3_Cancel public events} as integer,",
				"          C3_Flag as integer,",
				"          {C4_Restrictions on gatherings} as integer,",
				"          C4_Flag as integer,",
				"          {C5_Close public transport} as integer,",
				"          C5_Flag as integer,",
				"          {C6_Stay at home requirements} as integer,",
				"          C6_Flag as integer,",
				"          {C7_Restrictions on internal movement} as integer,",
				"          C7_Flag as integer,",
				"          {C8_International travel controls} as integer,",
				"          {E1_Income support} as integer,",
				"          E1_Flag as integer,",
				"          {E2_Debt contract relief} as integer,",
				"          {E3_Fiscal measures} as integer,",
				"          {E4_International support} as integer,",
				"          {H1_Public information campaigns} as integer,",
				"          H1_Flag as integer,",
				"          {H2_Testing policy} as integer,",
				"          {H3_Contact tracing} as integer,",
				"          {H4_Emergency investment in healthcare} as integer,",
				"          {H5_Investment in vaccines} as integer,",
				"          {H6_Facial Coverings} as integer,",
				"          H6_Flag as integer,",
				"          {H7_Vaccination policy} as integer,",
				"          H7_Flag as integer,",
				"          {H8_Protection of elderly people} as integer,",
				"          H8_Flag as integer,",
				"          M1_Wildcard as integer,",
				"          StringencyIndex as integer,",
				"          StringencyIndexForDisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> cosmoPolicies",
				"cosmoPolicies union(byName: true)~> union1",
				"cast1 select(mapColumn(",
				"          Date,",
				"          Country_Code = CountryCode,",
				"          C1 = {C1_School closing},",
				"          C1F = C1_Flag,",
				"          C2 = {C2_Workplace closing},",
				"          C2F = C2_Flag,",
				"          C3 = {C3_Cancel public events},",
				"          C3F = C3_Flag,",
				"          C4 = {C4_Restrictions on gatherings},",
				"          C4F = C4_Flag,",
				"          C5 = {C5_Close public transport},",
				"          C5F = C5_Flag,",
				"          C6 = {C6_Stay at home requirements},",
				"          C6F = C6_Flag,",
				"          C7 = {C7_Restrictions on internal movement},",
				"          C7F = C7_Flag,",
				"          C8 = {C8_International travel controls},",
				"          E1 = {E1_Income support},",
				"          E1F = E1_Flag,",
				"          E2 = {E2_Debt contract relief},",
				"          E3 = {E3_Fiscal measures},",
				"          E4 = {E4_International support},",
				"          H1 = {H1_Public information campaigns},",
				"          H1F = H1_Flag,",
				"          H2 = {H2_Testing policy},",
				"          H3 = {H3_Contact tracing},",
				"          H4 = {H4_Emergency investment in healthcare},",
				"          H5 = {H5_Investment in vaccines},",
				"          H6 = {H6_Facial Coverings},",
				"          H6F = H6_Flag,",
				"          H7 = {H7_Vaccination policy},",
				"          H7F = H7_Flag,",
				"          H8 = {H8_Protection of elderly people},",
				"          H8F = H8_Flag,",
				"          M1 = M1_Wildcard,",
				"          StringencyIndex,",
				"          StringencyIndexForDisplay,",
				"          StringencyLegacyIndex,",
				"          StringencyLegacyIndexForDisplay,",
				"          GovernmentResponseIndex,",
				"          GovernmentResponseIndexForDisplay,",
				"          ContainmentHealthIndex,",
				"          ContainmentHealthIndexForDisplay,",
				"          EconomicSupportIndex,",
				"          EconomicSupportIndexForDisplay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Policies",
				"union1 cast(output(",
				"          Date as date 'yyyy-MM-dd'",
				"     ),",
				"     errors: true) ~> cast1",
				"Policies sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Cases as integer,",
				"          Cases_Change as integer,",
				"          Country_Region as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['Policies.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> PoliciesSink"
			]
		}
	}
}